[{"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\index.js":"1","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\App.js":"2","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\reportWebVitals.js":"3","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Dashboard\\UserDash.js":"4","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Footer.js":"5","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Profile\\Profile.js":"6","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Details\\Payment.js":"7","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Navbar\\Navbar.js":"8","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Dashboard\\AdminDash.js":"9","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Spinner.js":"10","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Details\\Details.js":"11","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Profile\\UpdateProfile.js":"12","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\Login.js":"13","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\AdminLogin.js":"14","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\EmpLogin.js":"15","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\Register.js":"16","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\TransactionStatusChart.js":"17","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\TenureChart.js":"18","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\LoanChart.js":"19","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\AdminChart.js":"20","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Details\\LoanForm.js":"21"},{"size":637,"mtime":1612781807943,"results":"22","hashOfConfig":"23"},{"size":1312,"mtime":1614919195651,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1612781807944,"results":"25","hashOfConfig":"23"},{"size":6550,"mtime":1615182931633,"results":"26","hashOfConfig":"23"},{"size":434,"mtime":1613548113530,"results":"27","hashOfConfig":"23"},{"size":3722,"mtime":1614918883659,"results":"28","hashOfConfig":"23"},{"size":2447,"mtime":1614751239589,"results":"29","hashOfConfig":"23"},{"size":2168,"mtime":1614856127885,"results":"30","hashOfConfig":"23"},{"size":17075,"mtime":1614918783848,"results":"31","hashOfConfig":"23"},{"size":326,"mtime":1612781807926,"results":"32","hashOfConfig":"23"},{"size":7677,"mtime":1614853202461,"results":"33","hashOfConfig":"23"},{"size":5249,"mtime":1614919209165,"results":"34","hashOfConfig":"23"},{"size":1585,"mtime":1614851793930,"results":"35","hashOfConfig":"23"},{"size":2124,"mtime":1614841683908,"results":"36","hashOfConfig":"23"},{"size":1422,"mtime":1614841662376,"results":"37","hashOfConfig":"23"},{"size":4664,"mtime":1614844373350,"results":"38","hashOfConfig":"23"},{"size":4795,"mtime":1614852607998,"results":"39","hashOfConfig":"23"},{"size":2442,"mtime":1614852601705,"results":"40","hashOfConfig":"23"},{"size":2116,"mtime":1614852591570,"results":"41","hashOfConfig":"23"},{"size":2943,"mtime":1614852581599,"results":"42","hashOfConfig":"23"},{"size":3490,"mtime":1614853820365,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"a7xw99",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\index.js",[],["96","97"],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\App.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\reportWebVitals.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Dashboard\\UserDash.js",["98","99","100","101","102","103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport LoanChart from \"../../Charts/LoanChart\";\r\nimport axios from \"axios\";\r\nimport TenureChart from \"../../Charts/TenureChart\";\r\nimport Spinner from \"../Spinner\";\r\nimport Details from \"../../Details/Details\";\r\nimport { Link, useLocation, useParams } from \"react-router-dom\";\r\n\r\nconst UserDash = () => {\r\n  // const {id} = useParams();\r\n  const location = useLocation(); // contains the selected loanType after redirection from Payment Component.\r\n  const [loanType, setLoanType] = useState(null);\r\n  const [loanOptions, setLoanOptions] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //API call for getting the loan options to populate the select box fields.\r\n    const getLoanOptions = async (id) => {\r\n      try {\r\n        const res = await axios.get(`/getUserLoanOptions/${id}`);\r\n        setLoanOptions(res.data.loan_options);\r\n        // console.log(loanOptions, \"loan options\");\r\n        if (location.state == undefined) {\r\n          setLoanType(res.data.loan_options[0]);\r\n        } else {\r\n          setLoanType(location.state.loanType);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getLoanOptions(Number(localStorage.userId));\r\n    localStorage.userId = 2; //change user id from here for now\r\n  }, []);\r\n\r\n  \r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [transactionHistory, setTransactionHistory] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //API call for getting the user details of the selected loan type. It will be called whenever the loanType is changed\r\n    const getLoanDetails = async (id) => {\r\n      try {\r\n        if (loanType) {\r\n          const params = { id: id, loantype: loanType };\r\n          const res = await axios.get(`/getUserLoanDetails/`, {\r\n            params: params,\r\n          });\r\n          setUserDetails(res.data.data);\r\n          setTransactionHistory(res.data.transaction_history);\r\n          // console.log(res.data.transaction_history, \"user dash state\");\r\n          // console.log(res.data.data);\r\n          setLoaded(true);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getLoanDetails(Number(localStorage.userId));\r\n  }, [loanType]);\r\n\r\n  const handleChange = (e) => {\r\n    setLoanType(e.target.value);\r\n    setLoaded(false);\r\n  };\r\n\r\n  const mapLoanOptions = () => {\r\n    //populating the dropdown with options after redirection from Payment component\r\n    if (loanOptions) {\r\n      if (loanType != undefined) {\r\n        const { loanType } = location.state;\r\n        return (\r\n          <React.Fragment>\r\n            <option className=\"h6 text-success\" value={loanType}>\r\n              {loanType}\r\n            </option>\r\n            {loanOptions.map((option, index) => {\r\n              if (option != loanType) {\r\n                return (\r\n                  <option\r\n                    className=\"h6 text-success\"\r\n                    key={index}\r\n                    value={option}\r\n                  >\r\n                    {option}\r\n                  </option>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })}\r\n          </React.Fragment>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const DisplayData = () => {\r\n    if (loaded) {\r\n      if (userDetails) {\r\n        localStorage.username = `${userDetails.first_name} ${userDetails.last_name}`;\r\n        const {\r\n          paid_loan,\r\n          total_loan,\r\n          loan_tenure,\r\n          tenure_completed,\r\n        } = userDetails;\r\n        const loan = {\r\n          paid: parseInt(paid_loan),\r\n          remaining: parseInt(total_loan) - parseInt(paid_loan),\r\n        };\r\n        const tenure = {\r\n          completed: parseInt(tenure_completed),\r\n          remaining: parseInt(loan_tenure) - parseInt(tenure_completed),\r\n        };\r\n        return (\r\n          <div>\r\n            {userDetails.loan_status == \"active\" ? (\r\n              <div className=\"container-fluid \">\r\n                <div className=\"row mt-2 \">\r\n                  <div className=\"col-sm-3 mb-2\">\r\n                    <LoanChart loan={loan} />\r\n                  </div>\r\n                  <div className=\"col-sm-6 mb-2\">\r\n                    <Details\r\n                      userDetails={userDetails}\r\n                      transactionHistory={transactionHistory}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-sm-3\">\r\n                    <TenureChart tenure={tenure} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"container jumbotron h4 font-weight-normal\">\r\n                You don't have any {loanType} pending\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return <Spinner />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row container-fluid\">\r\n        <div className=\"col-sm-6\">\r\n          <div className=\"ml-auto\">\r\n            <Link\r\n              to=\"/newloan\"\r\n              className=\"btn shadow-sm w-50 btn-block btn-outline-info mt-4\"\r\n            >\r\n              New Loan\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-sm-3\"></div>\r\n        <div className=\"col-sm-3\">\r\n          <div className=\"mt-4\">\r\n            <div className=\"form-group\">\r\n              <select\r\n                className=\"form-control shadow-sm\"\r\n                onChange={(e) => {\r\n                  handleChange(e);\r\n                }}\r\n                name=\"loanType\"\r\n              >\r\n                {loanOptions && location.state == undefined //populating the dropdown with dynamic options\r\n                  ? loanOptions.map((option, index) => (\r\n                      <option\r\n                        className=\"h6 text-success\"\r\n                        key={index}\r\n                        value={option}\r\n                      >\r\n                        {option}\r\n                      </option>\r\n                    ))\r\n                  : mapLoanOptions()}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {loanOptions != null ? (\r\n        <DisplayData />\r\n      ) : (\r\n        <div className=\"jumbotron container h4\">\r\n          Not Applied for any loans yet....\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDash;\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Footer.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Profile\\Profile.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Details\\Payment.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Navbar\\Navbar.js",["105"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport profile from \"./profile.png\";\r\nimport loanimg from \"./loan.jfif\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav\r\n      className=\"navbar p-2 shadow navbar-dark navbar-expand-sm\"\r\n      style={{ backgroundColor: \"#5161ce\" }}\r\n    >\r\n      <div className=\"navbar-brand\">\r\n        <Link to=\"/\">\r\n          {\" \"}\r\n          <img\r\n            className=\"ml-3 rounded-circle\"\r\n            src={loanimg}\r\n            width=\"45\"\r\n            height=\"45\"\r\n            alt=\"logo\"\r\n          />\r\n        </Link>\r\n        <span className=\"ml-2 h4\"> Loan Management system</span>\r\n      </div>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbar-list-4\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbar-list-4\">\r\n        <ul className=\"navbar-nav ml-auto \">\r\n          <li className=\"nav-item dropdown\">\r\n            <a\r\n              className=\"nav-link dropdown-toggle\"\r\n              role=\"button\"\r\n              data-toggle=\"dropdown\"\r\n            >\r\n              <img\r\n                src={profile}\r\n                width=\"40\"\r\n                height=\"40\"\r\n                className=\"rounded-circle\"\r\n                alt=\"profile\"\r\n              />\r\n              <span className=\"h6 text-light p-1 font-weight-normal\">\r\n                {\" \"}\r\n                {localStorage.username}\r\n              </span>\r\n            </a>\r\n            <div className=\"dropdown-menu\">\r\n              <Link to=\"/\" className=\"dropdown-item\">\r\n                Dashboard\r\n              </Link>\r\n              <Link to=\"/profile\" className=\"dropdown-item\">\r\n                Edit Profile\r\n              </Link>\r\n              <Link to=\"/logout\" className=\"dropdown-item\">\r\n                Log Out\r\n              </Link>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Dashboard\\AdminDash.js",["106","107","108","109","110"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport AdminChart from \"../../Charts/AdminChart\";\r\nimport LoanChart from \"../../Charts/LoanChart\";\r\nimport TenureChart from \"../../Charts/TenureChart\";\r\nimport CurrencyFormat from \"react-currency-format\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCalendarAlt,\r\n  faEnvelope,\r\n  faLandmark,\r\n  faMobileAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport TransactioStatusChart from \"../../Charts/TransactionStatusChart\";\r\n\r\n\r\nconst AdminDash = () => {\r\n  const [loanType, setLoanType] = useState(null);\r\n  const [loanOptions, setLoanOptions] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [loanChart, setLoanChart] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //API call for getting the loanTypes.\r\n    const getLoanOptions = async () => {\r\n      try {\r\n        const res = await axios.get(\"/getAppliedLoanOptions\");\r\n        setLoanOptions(res.data.options);\r\n        setLoanChart(res.data.loan_summary);\r\n        setLoanType(res.data.options[0]);\r\n        setLoaded(true);\r\n\r\n        // console.log(d);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getLoanOptions();\r\n  }, []);\r\n\r\n  const [userList, setUserList] = useState(null);\r\n  const [status, setStatus] = useState(false);\r\n  const [modalData, setModalData] = useState(null);\r\n  const [searchType, setSearchType] = useState(\"Search By\");\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [searchData1, setSearchData1] = useState(null);\r\n  const [tableData, setTableData] = useState(null);\r\n  const [searchStatus, setSearchStatus] = useState(true);\r\n  const [comparator, setComparator] = useState(\"=\");\r\n\r\n  useEffect(() => {\r\n    //API call for getting all the users associated with the selected LoanType.\r\n    const getAllUsers = async () => {\r\n      try {\r\n        if (loanType) {\r\n          const res = await axios.get(\"/getUsers/\", {\r\n            params: { loantype: loanType },\r\n          });\r\n          setUserList(res.data.users);\r\n          setTableData(res.data.users);\r\n          setStatus(true);\r\n        }\r\n      } catch (err) {\r\n        console.log(\"AdminDash\", err);\r\n      }\r\n    };\r\n    getAllUsers();\r\n  }, [loanType]);\r\n\r\n  const createTable = (user, index) => {\r\n    //Creating Dynamic table according the data received\r\n    if (user) {\r\n      const { user_id, first_name, last_name, total_loan, paid_loan } = user;\r\n      const remaining_loan = total_loan - paid_loan;\r\n      return (\r\n        <tr key={index}>\r\n          <td className=\"text-justify\">{user_id}</td>\r\n          <td className=\"text-justify\">\r\n            {first_name} {last_name}\r\n          </td>\r\n          <td className=\"text-justify\">\r\n            <CurrencyFormat\r\n              value={total_loan}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              prefix={\"Rs. \"}\r\n            />\r\n          </td>\r\n          <td className=\"text-justify\">\r\n            {\" \"}\r\n            <CurrencyFormat\r\n              value={parseInt(paid_loan)}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              prefix={\"Rs. \"}\r\n            />\r\n          </td>\r\n          <td className=\"text-justify\">\r\n            <CurrencyFormat\r\n              value={parseInt(remaining_loan)}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              prefix={\"Rs. \"}\r\n            />\r\n          </td>\r\n\r\n          <td className=\"d-flex \">\r\n            <button\r\n              type=\"button\"\r\n              className=\"container ml-2 btn btn-outline-info\"\r\n              onClick={() => setModalData(user)}\r\n              data-toggle=\"modal\"\r\n              data-target=\"#user\"\r\n            >\r\n              View Chart\r\n            </button>\r\n            <button className=\"container ml-2 btn btn-outline-success\">\r\n              Close Loan\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const displayModal = () => {\r\n    //Modal to display the details of each users in the table. \r\n    if (modalData) {\r\n      console.log(\"display modal\", modalData);\r\n      const {\r\n        paid_loan,\r\n        total_loan,\r\n        tenure_completed,\r\n        loan_tenure,\r\n        first_name,\r\n        user_id,\r\n        last_name,\r\n        email,\r\n        mobile,\r\n        loan_type,\r\n        issue_date,\r\n        loan_id,\r\n      } = modalData;\r\n\r\n      const tenure_remaining = loan_tenure - tenure_completed;\r\n      const remaining_loan = total_loan - paid_loan;\r\n\r\n      const loan = {\r\n        paid: parseInt(paid_loan),\r\n        remaining: parseInt(remaining_loan),\r\n      };\r\n\r\n      const tenure = {\r\n        completed: parseInt(tenure_completed),\r\n        remaining: parseInt(tenure_remaining),\r\n      };\r\n\r\n      return (\r\n        <div\r\n          key={loan_id}\r\n          className=\"modal animate__animated animate__fadeIn\"\r\n          id=\"user\"\r\n        >\r\n          <div className=\"modal-dialog modal-lg modal-dialog-centered\">\r\n            <div className=\"modal-content\">\r\n              <div\r\n                className=\"modal-header text-light\"\r\n                style={{ backgroundColor: \"#5161ce\" }}\r\n              >\r\n                <p className=\"modal-title h4\">Details</p>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\r\n                  <span className=\"h4 text-light p-2\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <div className=\"row border ml-1 mr-1 px-2 rounded\">\r\n                  <div className=\"col-sm-3\">\r\n                    <p className=\"card-text text-justify text-center font-weight-normal h4 mt-4 pt-2\">\r\n                      {first_name} {last_name}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"col-sm\">\r\n                    <table className=\"table table-borderless\">\r\n                      <tbody>\r\n                        <tr>\r\n                          <td className=\"text-left\">\r\n                            <FontAwesomeIcon\r\n                              icon={faEnvelope}\r\n                              className=\"text-info \"\r\n                            />\r\n                            <b> Email</b> :- {email}\r\n                          </td>\r\n                          <td className=\"text-left\">\r\n                            <FontAwesomeIcon\r\n                              icon={faMobileAlt}\r\n                              className=\"text-info \"\r\n                            />\r\n                            <b> Mobile</b> :- {mobile}\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td className=\"text-left\">\r\n                            <FontAwesomeIcon\r\n                              icon={faLandmark}\r\n                              className=\"text-info\"\r\n                            />\r\n                            <b> Loan Type </b> :- {loan_type}\r\n                          </td>\r\n                          <td className=\"text-left\">\r\n                            <FontAwesomeIcon\r\n                              icon={faCalendarAlt}\r\n                              className=\"text-info\"\r\n                            />\r\n                            <b> Issue Date</b> :- {issue_date.slice(5, 16)}\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col-sm-5 mx-auto\">\r\n                    <LoanChart key={user_id} loan={loan} />\r\n                  </div>\r\n                  <div className=\"col-sm-5 mx-auto\">\r\n                    <TenureChart key={user_id} tenure={tenure} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    //API call to filter table data according to the selected filter type.\r\n    try {\r\n      const params = {\r\n        search_type: searchType,\r\n        search_key: searchData,\r\n        comparator: comparator,\r\n        search_key1: searchData1,\r\n        loantype: loanType,\r\n      };\r\n      const res = await axios.get(\"/filterSearch/\", { params: params });\r\n      console.log(res.data);\r\n      if (res.data.data != \"null\") {\r\n        setTableData(res.data.data);\r\n      } else {\r\n        setSearchStatus(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleSearchClear = () => {\r\n    setTableData(userList);\r\n    setSearchStatus(true);\r\n    setSearchType(\"Search By\");\r\n    setSearchData(\"\");\r\n  };\r\n\r\n  const handleOnChange = (e) => {\r\n    setSearchData(e.target.value);\r\n    console.log(e);\r\n  };\r\n\r\n  if (loaded) {\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid mt-4\">\r\n          <div className=\"row mt-2 \">\r\n            <div className=\"col-sm-3 mb-2\">\r\n              <ul className=\"nav nav-tabs \" role=\"tablist\">\r\n                <li className=\"nav-item\">\r\n                  <a\r\n                    className=\"nav-link active\"\r\n                    data-toggle=\"pill\"\r\n                    href=\"#home\"\r\n                  >\r\n                    Loan\r\n                  </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" data-toggle=\"pill\" href=\"#menu1\">\r\n                    Transaction\r\n                  </a>\r\n                </li>\r\n                {/* <li class=\"nav-item\">\r\n                  <a class=\"nav-link\" data-toggle=\"pill\" href=\"#menu2\">Menu 2</a>\r\n                </li> */}\r\n              </ul>\r\n              <div className=\"tab-content\">\r\n                <div id=\"home\" className=\" tab-pane active\">\r\n                  <br />\r\n                  <AdminChart loan={loanChart} />\r\n                </div>\r\n                <div id=\"menu1\" className=\" tab-pane fade\">\r\n                  <br />\r\n                  <TransactioStatusChart></TransactioStatusChart>{\" \"}\r\n                </div>\r\n                {/* <div id=\"menu2\" class=\" tab-pane fade\"><br />\r\n                  <h3>Menu 2</h3>\r\n                  <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p>\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-9 mb-2\">\r\n              <div className=\"row container-fluid\">\r\n                <div className=\"col-sm-4\">\r\n                  <div className=\"form-group\">\r\n                    <select\r\n                      className=\"form-control shadow-sm\"\r\n                      onChange={(e) => {\r\n                        setLoanType(e.target.value);\r\n                      }}\r\n                      name=\"loanType\"\r\n                    >\r\n                      {loanOptions\r\n                        ? loanOptions.map((option, index) => (\r\n                            <option\r\n                              className=\"h6 text-success\"\r\n                              key={index}\r\n                              value={option}\r\n                            >\r\n                              {option}\r\n                            </option>\r\n                          ))\r\n                        : null}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-8\"></div>\r\n              </div>\r\n              {status ? (\r\n                <div className=\"container-fluid mt-3\">\r\n                  {/* <div class=\"container\"> */}\r\n                  <div className=\"form-inline\">\r\n                    <div className=\"form-group\">\r\n                      <select\r\n                        onChange={(e) => setSearchType(e.target.value)}\r\n                        className=\"form-control w-100\"\r\n                        id=\"sel1\"\r\n                        value={searchType}\r\n                        name=\"search_type\"\r\n                      >\r\n                        <option>Search By</option>\r\n                        <option>User Id</option>\r\n                        <option>Name</option>\r\n                        <option>Date Issued</option>\r\n                        <option>Date Issued (Range)</option>\r\n                        <option>Loan Amount</option>\r\n                        <option>Loan Paid</option>\r\n                        <option>Loan Remaining</option>\r\n                        <option>Tenure</option>\r\n                        <option>Tenure remaining</option>\r\n                        <option>Tenure completed</option>\r\n                      </select>\r\n                    </div>\r\n                    {searchType === \"Name\" ||\r\n                    searchType === \"Search By\" ||\r\n                    searchType === \"User Id\" ||\r\n                    searchType == \"Date Issued (Range)\" ||\r\n                    searchType === null ? null : (\r\n                      <div className=\"form-group\">\r\n                        <select\r\n                          onChange={(e) => setComparator(e.target.value)}\r\n                          className=\"form-control w-100 mx-2\"\r\n                          id=\"sel1\"\r\n                          name=\"search_type\"\r\n                        >\r\n                          <option defaultValue> = </option>\r\n                          <option> &gt; </option>\r\n                          <option> &lt; </option>\r\n                        </select>\r\n                      </div>\r\n                    )}\r\n                    {searchType == \"Date Issued (Range)\" ? (\r\n                      <React.Fragment>\r\n                        <label className=\"pl-3\">From</label>\r\n                        <input\r\n                          className=\"form-control mx-2 w-25\"\r\n                          onChange={(e) => setSearchData(e.target.value)}\r\n                          type=\"date\"\r\n                          name=\"search_key\"\r\n                          placeholder=\"Search\"\r\n                        />\r\n                        <label>To</label>\r\n                        <input\r\n                          className=\"form-control mx-2 w-25\"\r\n                          onChange={(e) => setSearchData1(e.target.value)}\r\n                          type=\"date\"\r\n                          name=\"search_key\"\r\n                          placeholder=\"Search\"\r\n                        />\r\n                      </React.Fragment>\r\n                    ) : (\r\n                      <input\r\n                        className=\"form-control mx-2 w-25\"\r\n                        onChange={(e) => setSearchData(e.target.value)}\r\n                        type={searchType == \"Date Issued\" ? \"date\" : \"text\"}\r\n                        name=\"search_key\"\r\n                        value={searchData}\r\n                        placeholder=\"Search\"\r\n                      />\r\n                    )}\r\n\r\n                    <button\r\n                      onClick={(e) => handleSearch(e)}\r\n                      className=\"btn btn-success mx-2\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Search\r\n                    </button>\r\n                    <button\r\n                      onClick={() => handleSearchClear()}\r\n                      className=\"btn btn-success mx-2\"\r\n                    >\r\n                      Clear\r\n                    </button>\r\n                    <br />\r\n                  </div>\r\n                  {/* </div> */}\r\n                  <table className=\"table mt-3 shadow table-striped table-responsive-sm bg-light animate__animated animate__fadeIn\">\r\n                    <thead\r\n                      className=\"text-left text-light\"\r\n                      style={{ backgroundColor: \"#5161ce\" }}\r\n                    >\r\n                      <tr>\r\n                        <th className=\"h6\">ID</th>\r\n                        <th className=\"h6\">Name</th>\r\n                        <th className=\"h6\">Loan Amount</th>\r\n                        <th className=\"h6\">Loan Paid</th>\r\n                        <th className=\"h6\">Loan Remaining</th>\r\n                        <th className=\"h6 text-center\">Action</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {searchStatus ? (\r\n                        tableData.map(createTable)\r\n                      ) : (\r\n                        <tr>\r\n                          <td colSpan=\"6\" className=\"text-info h5\">\r\n                            No Records found\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {displayModal()}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Spinner />;\r\n  }\r\n};\r\n\r\nexport default AdminDash;\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\layout\\Spinner.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Details\\Details.js",["111","112","113","114","115","116","117","118","119"],"import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport CurrencyFormat from \"react-currency-format\";\r\n\r\nconst tableStyle = {\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0 10px\",\r\n};\r\n\r\nconst Details = (props) => {\r\n  const {\r\n    total_loan,\r\n    paid_loan,\r\n    loan_tenure,\r\n    tenure_completed,\r\n    installment_due_date,\r\n    installment_amt,\r\n    loan_type,\r\n  } = props.userDetails;\r\n\r\n  const tenure_remaining = loan_tenure - tenure_completed;\r\n  const remaining_loan = total_loan - paid_loan;\r\n  const transaction_history = props.transactionHistory;\r\n  // console.log(typeof transaction_history);\r\n\r\n  const Pay = () => {\r\n    const {\r\n      installment_amt,\r\n      installment_due_date,\r\n      user_id,\r\n      loan_id,\r\n      loan_type,\r\n    } = props.userDetails;\r\n\r\n    const paymentData = {\r\n      //Payload for the Payment component after clicking the Pay now button\r\n      installment_amt,\r\n      installment_due_date,\r\n      user_id,\r\n      loan_id,\r\n      loan_type,\r\n    };\r\n\r\n    const closeLoanData = {\r\n      //Payload for the Payment component after clicking the close loan button\r\n      installment_amt: remaining_loan,\r\n      installment_due_date,\r\n      user_id,\r\n      loan_id,\r\n      loan_type,\r\n    };\r\n\r\n    // console.log(closeLoanData, \"Close loan\");\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"card shadow-sm mt-4\">\r\n          <div className=\"card-body\">\r\n            <div\r\n              className=\"card-header h6 rounded text-white\"\r\n              style={{ backgroundColor: \"#76b900\" }}\r\n            >\r\n              Current Installment\r\n            </div>\r\n            <hr></hr>\r\n            <p className=\"card-text my-2\">Amount : Rs. {installment_amt} </p>\r\n            <p className=\"card-text\">Due Date: {installment_due_date} </p>\r\n\r\n            <Link\r\n              to={{ pathname: \"/payment\", payment_data: paymentData }}\r\n              className=\"btn btn-primary mt-1\"\r\n            >\r\n              Pay Now\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"container mt-4\">\r\n          <Link\r\n            to={{ pathname: \"/payment\", payment_data: closeLoanData }}\r\n            className=\"btn btn-outline-success btn-block \"\r\n          >\r\n            Close Loan\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const formatTenure = (tenure) => {\r\n    let year = parseInt(tenure / 12);\r\n    let month = tenure % 12;\r\n    if (year < 1) {\r\n      return <span>{month} mths.</span>;\r\n    } else if (year == 1) {\r\n      if (month == 0 && year == 1) {\r\n        return <span>{year} yr.</span>;\r\n      } else {\r\n        return (\r\n          <span>\r\n            {year} yr {month} mths.\r\n          </span>\r\n        );\r\n      }\r\n    } else {\r\n      return (\r\n        <span>\r\n          {year} yrs {month} mths.\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  const setStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"green\":\r\n        return \"text-success\";\r\n\r\n      case \"yellow\":\r\n        return \"text-warning\";\r\n\r\n      case \"red\":\r\n        return \"text-danger\";\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"card shadow\">\r\n      <div className=\"card-body\">\r\n        <div\r\n          className=\"card-header shadow h5 rounded text-white\"\r\n          style={{ backgroundColor: \"#e66220\" }}\r\n        >\r\n          Details - {loan_type}\r\n        </div>\r\n        <div className=\"row mt-2\">\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"card shadow-sm mt-3\">\r\n              <div className=\"card-body\">\r\n                <div\r\n                  className=\"card-header h6 rounded text-white\"\r\n                  style={{ backgroundColor: \"#5161ce\" }}\r\n                >\r\n                  Loan (in Rs.)\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"text-left ml-2  font-italic\">\r\n                  <p className=\"card-text\">\r\n                    Loan Amount :{\" \"}\r\n                    <CurrencyFormat\r\n                      value={total_loan}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      prefix={\"Rs. \"}\r\n                    />\r\n                  </p>\r\n                  <p className=\"card-text\">\r\n                    Paid :{\" \"}\r\n                    <CurrencyFormat\r\n                      value={parseInt(paid_loan)}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      prefix={\"Rs. \"}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p className=\"card-text\">\r\n                    Remaining :{\" \"}\r\n                    <CurrencyFormat\r\n                      value={parseInt(remaining_loan)}\r\n                      displayType={\"text\"}\r\n                      thousandSeparator={true}\r\n                      prefix={\"Rs. \"}\r\n                    />{\" \"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"card shadow-sm mt-3\">\r\n              <div className=\"card-body\">\r\n                <div\r\n                  className=\"card-header h6 rounded text-white\"\r\n                  style={{ backgroundColor: \"#76b900\" }}\r\n                >\r\n                  Tenure\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"text-left ml-2  font-italic\">\r\n                  <p className=\"card-text\">\r\n                    Total :{\" \"}\r\n                    {formatTenure(\r\n                      loan_tenure\r\n                    )}{\" \"}\r\n                  </p>\r\n                  <p className=\"card-text\">\r\n                    Completed : {formatTenure(tenure_completed)}{\" \"}\r\n                  </p>\r\n                  <p className=\"card-text\">\r\n                    Remaining : {formatTenure(tenure_remaining)}{\" \"}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row \">\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"card mt-4 shadow-sm\">\r\n              <div className=\"card-body\">\r\n                <div\r\n                  className=\"card-header h6 rounded text-white\"\r\n                  style={{ backgroundColor: \"#5161ce\" }}\r\n                >\r\n                  Transaction History\r\n                </div>\r\n                <table className=\"table table-responsive-sm\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\">Id</th>\r\n                      <th scope=\"col\">Amount</th>\r\n                      <th scope=\"col\">Date</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {transaction_history\r\n                      ? transaction_history.map((res, index) => (\r\n                          <tr key={index}>\r\n                            <td>\r\n                              <span className={setStatusColor(res.status)}>\r\n                                &#9679;\r\n                              </span>\r\n                              {res.tid}{\" \"}\r\n                            </td>\r\n                            <td>Rs.{res.paid_amount} </td>\r\n                            <td>{res.date.slice(4, 16)}</td>\r\n                          </tr>\r\n                        ))\r\n                      : null}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm\">\r\n            <Pay />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Profile\\UpdateProfile.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\Login.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\AdminLogin.js",["120"],"import { faUserLock } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction AdminLogin(props) {\r\n  const [email, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loginStat, setLoginStat] = useState(true);\r\n\r\n  const login = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  if (loginStat) {\r\n    return (\r\n      <div\r\n        id=\"admin\"\r\n        className=\"container tab-pane active animate__animated animate__pulse\"\r\n      >\r\n        <br />\r\n        <span className=\"d-flex mx-auto\">\r\n          {\" \"}\r\n          <FontAwesomeIcon\r\n            icon={faUserLock}\r\n            size=\"3x\"\r\n            color=\"slateblue\"\r\n            className=\"m-auto\"\r\n          />\r\n        </span>\r\n        <br />\r\n        <form onSubmit={(e) => login(e)}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"uname\" className=\"h6 text-left\">\r\n              Username :-\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              required\r\n              className=\"form-control\"\r\n              id=\"uname\"\r\n              placeholder=\"Enter username\"\r\n              name=\"uname\"\r\n              value={email}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"pwd\" className=\"h6\">\r\n              Password :-\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              required\r\n              className=\"form-control\"\r\n              placeholder=\"Enter password\"\r\n              name=\"pswd\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          <br />\r\n          <button type=\"submit\" value=\"Submit\" className=\"btn btn-primary\">\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to=\"/dash\" />;\r\n  }\r\n}\r\n\r\nexport default AdminLogin;\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\EmpLogin.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\auth\\Register.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\TransactionStatusChart.js",["121","122","123","124"],"import React, { Component } from \"react\";\r\nimport { Bar, Doughnut } from \"react-chartjs-2\";\r\nimport CurrencyFormat from \"react-currency-format\";\r\nimport axios from \"axios\";\r\nimport { data } from \"jquery\";\r\n\r\nexport default class TransactioStatusChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"rendered\");\r\n    this.state = {\r\n      display: false,\r\n\r\n      chartData: {\r\n        labels: [\"Green\", \"Yellow\", \"Red\"],\r\n        datasets: [\r\n          {\r\n            backgroundColor: [\"green\", \"yellow\", \"red\"],\r\n            borderColor: \"white\",\r\n            // hoverBorderColor : 'slateblue',\r\n            // hoverBackgroundColor : 'gold',\r\n            data: [0, 0, 0],\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0,\r\n                max: 100,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n\r\n        responsive: true,\r\n        animation: {\r\n          animateRotate: true,\r\n          //  duration : 2000\r\n        },\r\n        legend: {\r\n          display: false,\r\n          labels: {\r\n            // boxWidth : 10\r\n            fontSize: 15,\r\n            fontColor: \"#5161ce\",\r\n          },\r\n        },\r\n        layout: {\r\n          padding: 1,\r\n        },\r\n      },\r\n    };\r\n  }\r\n  fetchData = async (yearAndMonth) => {\r\n    const res = await axios.get(\"/getTransactionStatus/\", {\r\n      params: { data: yearAndMonth },\r\n    });\r\n    console.log(res.data.data, \"fetchdata\");\r\n\r\n    this.setState({\r\n      display: true,\r\n      chartData: {\r\n        labels: [\"Green\", \"Yellow\", \"Red\"],\r\n        datasets: [\r\n          {\r\n            backgroundColor: [\"#76b900\", \"#FFD300\", \"#FF0000\"],\r\n            borderColor: \"white\",\r\n            data: res.data.data,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0,\r\n                max: res.data.range + 1,\r\n                fontColor: \"slateblue\",\r\n                // lineHeight: 2.3\r\n              },\r\n            },\r\n          ],\r\n        },\r\n\r\n        responsive: true,\r\n        animation: {\r\n          animateRotate: true,\r\n          //  duration : 2000\r\n        },\r\n        legend: {\r\n          display: false,\r\n          labels: {\r\n            // boxWidth : 10\r\n            fontSize: 15,\r\n            fontColor: \"#5161ce\",\r\n          },\r\n        },\r\n        layout: {\r\n          padding: 1,\r\n        },\r\n      },\r\n    });\r\n\r\n    console.log(this.state, \"state in fetch data\");\r\n  };\r\n  componentDidMount() {\r\n    let d = new Date()\r\n    let dateStr = `${d.getFullYear()}-${d.getMonth() + 1}`;\r\n    console.log(d.getMonth(),\"month\");\r\n    this.fetchData(dateStr);\r\n  }\r\n  handleChange(e) {\r\n    console.log(e.target.value,\"onchange\");\r\n    \r\n    this.fetchData(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    let d = new Date()\r\n    let dateStr = `${d.getFullYear()}-${d.getMonth() + 1}`;\r\n    if (this.state.display) {\r\n      return (\r\n        <div className=\"card rounded shadow animate__animated animate__pulse \">\r\n          <div className=\"card-body\">\r\n            <div\r\n              className=\"card-header shadow h5 rounded text-white\"\r\n              style={{ backgroundColor: \"#5161ce\" }}\r\n            >\r\n              Monthly Transaction Status\r\n            </div>\r\n\r\n            <hr\r\n              className=\"w-75 mb-4\"\r\n              style={{ borderTop: \"2px solid #5161ce\" }}\r\n            />\r\n            <div>\r\n              <form>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"month\"\r\n                    className=\"form-control\"\r\n                    id=\"exampleInputEmail1\"\r\n                    aria-describedby=\"emailHelp\"\r\n                    onChange={(e) => {\r\n                      this.handleChange(e);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <Bar\r\n              data={this.state.chartData}\r\n              options={this.state.options}\r\n              height={35}\r\n              width={40}\r\n            />\r\n            <div className=\"text-left \">\r\n              <p className=\"text-center mt-2 shadow-sm card-header\">Color indicates payment status</p>\r\n              <br/>\r\n              <p className=\"card-text\"><span className=\"text-success h5\">&#9679;</span> before 15th day.</p>\r\n              <p className=\"card-text \"><span className=\"text-warning h5\">&#9679;</span> between 15th and due date.</p>\r\n              <p className=\"card-text\"><span className=\"text-danger h5\">&#9679;</span> past the due date.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return \"loading\";\r\n    }\r\n  }\r\n}\r\n",["125","126"],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\TenureChart.js",["127","128"],"import React, { Component } from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nexport default class TenureChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { completed, remaining } = this.props.tenure;\r\n    this.state = {\r\n      totalTenure: completed + remaining,\r\n      chartData: {\r\n        labels: [\"Remaining\", \"Completed\"],\r\n        datasets: [\r\n          {\r\n            backgroundColor: [\"rgb(59, 120, 156)\", \"rgb(138, 83, 163)\"],\r\n            borderColor: \"white\",\r\n            // hoverBorderColor : 'slateblue',\r\n            // hoverBackgroundColor : 'gold',\r\n            data: [remaining, completed],\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        cutoutPercentage: 60,\r\n        responsive: true,\r\n        animation: {\r\n          animateRotate: true,\r\n          //  duration : 2000\r\n        },\r\n        legend: {\r\n          // display:false\r\n          labels: {\r\n            // boxWidth : 10\r\n            fontSize: 15,\r\n            fontColor: \"#5161ce\",\r\n          },\r\n        },\r\n        layout: {\r\n          padding: 5,\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  formatTenure() {\r\n    let year = parseInt(this.state.totalTenure / 12);\r\n    let month = this.state.totalTenure % 12;\r\n    if (year < 1) {\r\n      return <span>{month} mths.</span>;\r\n    } else if (year == 1) {\r\n      if (month == 0) {\r\n        return <span>{year} yr.</span>;\r\n      } else {\r\n        return (\r\n          <span>\r\n            {year} yr {month} mths.\r\n          </span>\r\n        );\r\n      }\r\n    } else {\r\n      return (\r\n        <span>\r\n          {year} yrs {month} mths.\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card rounded shadow animate__animated animate__pulse\">\r\n        <div className=\"card-body\">\r\n          <div\r\n            className=\"card-header shadow h5 rounded text-white\"\r\n            style={{ backgroundColor: \"#76b900\" }}\r\n          >\r\n            Tenure Summary\r\n          </div>\r\n          <hr className=\"w-75\" style={{ borderTop: \"2px solid green\" }} />\r\n          <Doughnut\r\n            data={this.state.chartData}\r\n            options={this.state.options}\r\n            height={43}\r\n            width={50}\r\n          />\r\n          <hr />\r\n          <div className=\"card-text text-center mt-3 h6 \">\r\n            {\" \"}\r\n            Period : {this.formatTenure()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\LoanChart.js",[],"C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Charts\\AdminChart.js",["129","130"],"import React, { Component } from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport CurrencyFormat from \"react-currency-format\";\r\n\r\nexport default class AdminChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { total_recovered, total_distributed, tenure } = this.props.loan;\r\n    this.state = {\r\n      total: total_recovered + total_distributed,\r\n      tenure: tenure,\r\n      chartData: {\r\n        labels: [\"Loan Remaining\", \"Loan Recovered\"],\r\n        datasets: [\r\n          {\r\n            backgroundColor: [\"rgb(59, 120, 156)\", \"#76b900\"],\r\n            borderColor: \"white\",\r\n            // hoverBorderColor : 'slateblue',\r\n            // hoverBackgroundColor : 'gold',\r\n            data: [total_distributed, total_recovered],\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        cutoutPercentage: 0,\r\n        responsive: true,\r\n        animation: {\r\n          animateRotate: true,\r\n          //  duration : 2000\r\n        },\r\n        legend: {\r\n          // display:false\r\n          labels: {\r\n            // boxWidth : 10\r\n            fontSize: 15,\r\n            fontColor: \"#5161ce\",\r\n          },\r\n        },\r\n        layout: {\r\n          padding: 1,\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  formatTenure() {\r\n    let year = parseInt(this.state.tenure / 12);\r\n    let month = this.state.tenure % 12;\r\n    console.log(month, year);\r\n    if (year < 1) {\r\n      return <span>{month} mths.</span>;\r\n    } else if (year == 1) {\r\n      if (month == 0) {\r\n        return <span>{year} yr.</span>;\r\n      } else {\r\n        return (\r\n          <span>\r\n            {year} yr {month} mths.\r\n          </span>\r\n        );\r\n      }\r\n    } else {\r\n      return (\r\n        <span>\r\n          {year} yrs {month} mths.\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card rounded shadow animate__animated animate__pulse\">\r\n        <div className=\"card-body\">\r\n          <div\r\n            className=\"card-header shadow h5 rounded text-white\"\r\n            style={{ backgroundColor: \"#5161ce\" }}\r\n          >\r\n            Loan Summary\r\n          </div>\r\n          <hr className=\"w-75\" style={{ borderTop: \"2px solid #5161ce\" }} />\r\n          <Doughnut\r\n            data={this.state.chartData}\r\n            options={this.state.options}\r\n            height={35}\r\n            width={40}\r\n          />\r\n          <hr />\r\n          <div className=\"card-text text-center mt-3 h6 \">\r\n            {\" \"}\r\n            Loan Distributed :{\" \"}\r\n            <CurrencyFormat\r\n              value={parseInt(this.state.total)}\r\n              displayType={\"text\"}\r\n              thousandSeparator={true}\r\n              prefix={\"Rs. \"}\r\n            />\r\n          </div>\r\n          <div className=\"card-text text-center mt-4 h6 \">\r\n            {\" \"}\r\n            Estimated Recovery Time : <br/><br/> {this.formatTenure()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\thakare_v\\Desktop\\loan-management-react\\src\\Components\\Details\\LoanForm.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":7,"column":29,"nodeType":"137","messageId":"138","endLine":7,"endColumn":38},{"ruleId":"139","severity":1,"message":"140","line":22,"column":28,"nodeType":"141","messageId":"142","endLine":22,"endColumn":30},{"ruleId":"143","severity":1,"message":"144","line":33,"column":6,"nodeType":"145","endLine":33,"endColumn":8,"suggestions":"146"},{"ruleId":"139","severity":1,"message":"147","line":70,"column":20,"nodeType":"141","messageId":"142","endLine":70,"endColumn":22},{"ruleId":"139","severity":1,"message":"147","line":78,"column":26,"nodeType":"141","messageId":"142","endLine":78,"endColumn":28},{"ruleId":"139","severity":1,"message":"140","line":122,"column":38,"nodeType":"141","messageId":"142","endLine":122,"endColumn":40},{"ruleId":"139","severity":1,"message":"140","line":178,"column":48,"nodeType":"141","messageId":"142","endLine":178,"endColumn":50},{"ruleId":"148","severity":1,"message":"149","line":39,"column":13,"nodeType":"150","endLine":43,"endColumn":14},{"ruleId":"139","severity":1,"message":"147","line":255,"column":25,"nodeType":"141","messageId":"142","endLine":255,"endColumn":27},{"ruleId":"135","severity":1,"message":"151","line":272,"column":9,"nodeType":"137","messageId":"138","endLine":272,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":372,"column":32,"nodeType":"141","messageId":"142","endLine":372,"endColumn":34},{"ruleId":"139","severity":1,"message":"140","line":387,"column":33,"nodeType":"141","messageId":"142","endLine":387,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":410,"column":42,"nodeType":"141","messageId":"142","endLine":410,"endColumn":44},{"ruleId":"135","severity":1,"message":"152","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":25},{"ruleId":"135","severity":1,"message":"153","line":2,"column":16,"nodeType":"137","messageId":"138","endLine":2,"endColumn":24},{"ruleId":"135","severity":1,"message":"154","line":5,"column":7,"nodeType":"137","messageId":"138","endLine":5,"endColumn":17},{"ruleId":"135","severity":1,"message":"155","line":16,"column":5,"nodeType":"137","messageId":"138","endLine":16,"endColumn":25},{"ruleId":"135","severity":1,"message":"156","line":17,"column":5,"nodeType":"137","messageId":"138","endLine":17,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":94,"column":21,"nodeType":"141","messageId":"142","endLine":94,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":95,"column":17,"nodeType":"141","messageId":"142","endLine":95,"endColumn":19},{"ruleId":"139","severity":1,"message":"140","line":95,"column":30,"nodeType":"141","messageId":"142","endLine":95,"endColumn":32},{"ruleId":"157","severity":1,"message":"158","line":114,"column":5,"nodeType":"159","messageId":"160","endLine":123,"endColumn":6},{"ruleId":"135","severity":1,"message":"161","line":9,"column":21,"nodeType":"137","messageId":"138","endLine":9,"endColumn":33},{"ruleId":"135","severity":1,"message":"162","line":2,"column":15,"nodeType":"137","messageId":"138","endLine":2,"endColumn":23},{"ruleId":"135","severity":1,"message":"163","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":22},{"ruleId":"135","severity":1,"message":"164","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":14},{"ruleId":"135","severity":1,"message":"165","line":124,"column":9,"nodeType":"137","messageId":"138","endLine":124,"endColumn":16},{"ruleId":"131","replacedBy":"166"},{"ruleId":"133","replacedBy":"167"},{"ruleId":"139","severity":1,"message":"140","line":49,"column":21,"nodeType":"141","messageId":"142","endLine":49,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":50,"column":17,"nodeType":"141","messageId":"142","endLine":50,"endColumn":19},{"ruleId":"139","severity":1,"message":"140","line":52,"column":21,"nodeType":"141","messageId":"142","endLine":52,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":53,"column":17,"nodeType":"141","messageId":"142","endLine":53,"endColumn":19},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.","ArrayExpression",["170"],"Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'handleOnChange' is assigned a value but never used.","'useState' is defined but never used.","'Redirect' is defined but never used.","'tableStyle' is assigned a value but never used.","'installment_due_date' is assigned a value but never used.","'installment_amt' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'setLoginStat' is assigned a value but never used.","'Doughnut' is defined but never used.","'CurrencyFormat' is defined but never used.","'data' is defined but never used.","'dateStr' is assigned a value but never used.",["168"],["169"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},"Update the dependencies array to be: [location.state]",{"range":"173","text":"174"},[1297,1299],"[location.state]"]